<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace : xml파일이 여러개일 수 있으므로 
	이를 구별하기 위한 식별 용도로 사용하기 위해서 namespace가 필요
	보통 테이블명을 쓴다
 -->
 <!-- 이 파일이 mapper -->
<mapper namespace="book">
	<resultMap type="bookVO" id="bookMap">
		<result property="bookId" column="BOOK_ID" />
		<result property="title" column="TITLE" />
		<result property="category" column="CATEGORY" />
		<result property="price" column="PRICE" />
		<result property="insertDate" column="INSERT_DATE" />
		<result property="content" column="CONTENT" />
		<collection property="attachVOList" resultMap="attachMap"></collection>
	</resultMap>
	
	<resultMap type="attachVO" id="attachMap">
		<result property="etpId" column="ETP_ID"/> 
		<result property="seq" column="SEQ"/> 
		<result property="filename" column="FILENAME"/> 
		<result property="filesize" column="FILESIZE"/> 
		<result property="thumbnail" column="THUMBNAIL"/> 
		<result property="regdate" column="REGDATE"/> 
	</resultMap>

	<sql id="where">
		<!-- 검색 -->
		<if test="keyword!=null and keyword!=''">
			AND (
        			TITLE 	 LIKE '%' || #{keyword} || '%'
        		 OR	CATEGORY LIKE '%' || #{keyword} || '%'
        		 OR	CONTENT	 LIKE '%' || #{keyword} || '%'
        		)
        </if>
		
	</sql>

	<!-- MyBatis에서 제공해주는 데이터 입력을 나타내는 태그
		 1) 드루와 : Dao 객체가 던진 데이터 타입. parameterType만 씀 (parameter Type, parameter Map 중 type만 쓴다.) 
		 2) 가즈아 : Dao 객체의 메소드 쪽으로 리턴할 타입. insert/update/delete의 경우 생략(당연히 int)
		 	- resultType => String, int, hashMap, VO, 
		 	- resultMap => 1:N의 관계. MyBatis의 resultMap 태그를 사용
	 -->
	<!-- 
		 (전) bookVO{bookId:0, title:개똥이글로리, category:소설, price:10000, 
		 			insertDate:null, content:null}
		 (후) bookVO{bookId:1, title:개똥이글로리, category:소설, price:10000, 
		 			insertDate:null, content:null}
		  마이바티스 쿼리 XML에 전달되면 샵{멤버변수}로 작성하여 값으로 치환함
	 -->	
	<insert id="createPost" parameterType="bookVO">
		<!-- 키를 높이면 락커(rok)가 될 수 있을까?  -->
		<selectKey resultType="int" order="BEFORE" keyProperty="bookId">
			SELECT NVL(MAX(BOOK_ID),0)+1 FROM BOOK
		</selectKey>
		INSERT INTO BOOK(BOOK_ID, TITLE, CATEGORY, PRICE, INSERT_DATE, CONTENT)
		VALUES(#{bookId}, #{title}, #{category}, #{price}, SYSDATE, #{content})
	</insert>
	
	<!-- p.71 -->
	<!-- 책 상세보기
		select 태그는 조회(select) 쿼리를 실행하기 위한 mybatis 태그
		드르와 : parameterType(book_SQL.xml로 들어오는 값? ex) book_id=2 중에서  '2'
		가즈아 : resultType(BookDao로 가즈아) - bookVO 타입
				(resultType, resultMap 두 개가 있음)
				
		 (전) bookVO{bookId:2, title:null, category:null, price:0, 
		 			insertDate:null, content:null}
		 (후) bookVO{bookId:3, title:개똥이글로리, category:소설, price:10000, 
		 			insertDate:23/01/20, content:더글로리 후속작}		
	 -->
	<select id="detail" parameterType="bookVO" resultMap="bookMap">
<!-- 		select  BOOK_ID, TITLE, CATEGORY, PRICE, INSERT_DATE, CONTENT -->
<!-- 		from    book -->
<!-- 		where   book_id = #{bookId} -->

			SELECT 	A.BOOK_ID, A.TITLE, A.CATEGORY, A.PRICE, A.INSERT_DATE, A.CONTENT
			        , B.SEQ, B.FILENAME, B.FILESIZE, B.THUMBNAIL, B.REGDATE, B.ETP_ID
			FROM 	BOOK A LEFT OUTER JOIN ATTACH B
			ON		(TO_CHAR(A.BOOK_ID) = B.ETP_ID)
			WHERE   A.BOOK_ID = #{bookId}
		
	</select>
	
	<!-- 책 수정하기. update 태그는 update 쿼리를 실행하기 위한 마이바티스 태그 -->
	<!-- BookVO [bookId=2, title=친구2, category=드라마2, price=120002, insertDate=null, content=내용2]-->
							<!-- parameterMap은 안쓴다 -->
	<!-- insert/update/delete의 경우 resultType 생략 가능(당연히 int) -->
	<update id="updatePost" parameterType="bookVO">
		UPDATE  BOOK
		SET     TITLE=#{title}, CATEGORY=#{category}, PRICE=#{price}, 
				INSERT_DATE=SYSDATE, CONTENT=#{content}
		WHERE   BOOK_ID = #{bookId}
	</update>
	
	<!-- 책 삭제하기 -->
	<!-- parameterType : int, String, VO, hashMap 
		 BookVO [bookId=2, title=null, category=null, price=0, insertDate=null, content=null]
	-->
	<delete id="deletePost" parameterType="bookVO">
		DELETE  FROM BOOK
		WHERE   BOOK_ID IN(#{bookId})
	</delete>
	
	<!-- 책 목록 
	parameterType : String keywrod
	
	where 1=1은 늘 참(true)임
	** 원래라면 조건이 2개 이상일 때  where + and + and ...
	      	 조건이 1개 잇아이면 생략 + where이어야 함
	=> 	where 1=1을 앞에 쓰면 조건이 몇개든 and로 이어지도록 해줄 수 있음
		조건이 2개이상이면  and + and + and ...
			1개 이상이면 생략  + and  
	<앞에 where 1=1을 이용해서  where절을 시작해놨기 때문!>			
	-->
	<select id="list" parameterType="hashMap" resultType="bookVO">
		WITH T AS(
					SELECT  ROW_NUMBER() OVER(ORDER BY BOOK_ID DESC) RNUM
					        , BOOK_ID, TITLE, CATEGORY, PRICE, INSERT_DATE, CONTENT
					        FROM BOOK
					        WHERE 1=1
					        <!-- if문이 없으면 keyword가 null일 때를 걸러주지 못하기 때문에 500에러가 난다. 
					        	 keyword 값이 있을 때만 조건문을 쓸 수 있도록 걸러줌
					        -->
					        <if test="keyword!=null and keyword!=''">
					        	AND(
					        			TITLE 	 LIKE '%' || #{keyword} || '%'
					        		OR	CATEGORY LIKE '%' || #{keyword} || '%'
					        		OR	CONTENT	 LIKE '%' || #{keyword} || '%'
					        	)
					        </if>
				)
		SELECT  T.RNUM, T.BOOK_ID, T.TITLE, T.CATEGORY, T.PRICE
		        , T.INSERT_DATE, T.CONTENT 
		FROM    T
		WHERE   T.RNUM BETWEEN (#{currentPage}*#{size})-(#{size}-1) 
		        AND (#{currentPage}*#{size})
	</select>
	
	
	<update id="createPostAttach" parameterType="java.util.List">
		<!-- order="BEFORE"는 foreach 태그 실행 전에 selectKey부터 실행 -->
					<!-- R O K  -->
		<selectKey resultType="int" order="BEFORE" keyProperty="seq">
			SELECT NVL(MAX(SEQ),0)+1 FROM ATTACH
		</selectKey>
		
		<!-- index : 반복 시 index값. 0부터 시작. -->
		<foreach collection="list" item="attachVO"
				open="INSERT ALL" close="SELECT * FROM DUAL" 
				separator=" " index="idx">	
		    INTO ATTACH(SEQ, FILENAME, FILESIZE, THUMBNAIL, REGDATE, ETP_ID) 
         		 VALUES(#{idx} + #{seq}, #{attachVO.filename}, #{attachVO.filesize}
         		 		,'', sysdate, #{attachVO.etpId})	
		    	<!-- index는 0부 터 시작 => seq 값에 0부터 1씩 커지는 수를 더해서 증가시킴 -->
		    	<!-- #{}안에 들어있는 변수 = attachVO의 변수 -->
		</foreach>
	</update>
	
	<!-- 페이징 => 전체 행의수(total) -->
	<select id="getTotal" parameterType="String" resultType="int">
		SELECT COUNT(*) FROM BOOK
		WHERE 1=1	<!-- if문 쓰려면 앞에 WHERE 1=1 필요 -->
        <!-- 총 개수를 select할 때 !! 검색된 결과의 개수만 가져올 수 있도록 if문을 써줘야함 -->
<!--         <if test="keyword!=null and keyword!=''"> -->
<!--         	AND( -->
<!--         			TITLE 	 LIKE '%' || #{keyword} || '%' -->
<!--         		OR	CATEGORY LIKE '%' || #{keyword} || '%' -->
<!--         		OR	CONTENT	 LIKE '%' || #{keyword} || '%' -->
<!--         	) -->
<!--         </if> -->

		<!-- ↑위의 검색 조건을 위에 따로 빼서 간단하게 쓸 수 있도록 처리해준 것  ==> ↓ -->
		<include refid="where"></include>
	</select>
	
</mapper>



































