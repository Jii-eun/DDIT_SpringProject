<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
						http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">	

	<!-- customAccessDenied를 자바빈(객체)으로 등록함 -->
	<bean id="customAccessDenied" 
		class="kr.or.ddit.security.CustomAccessDeniedHandler"></bean>
	
	<bean id="customLoginSuccess" 
		  class="kr.or.ddit.security.CustomLoginSuccessHandler"></bean>
		  
	<!-- 사용자가 정의한 비밀번호 암호화 처리기를 빈으로 등록함 -->
	<bean id="customPasswordEncoder"
		  class="kr.or.ddit.security.CustomNoOpPasswordEncoder"></bean>	  
	
	<!-- 사용자 정의 사용자 상세 기능 ****** -->
	<bean id="customUserDetailsService"
		  class="kr.or.ddit.security.CustomUserDetailsService"></bean>
	
	<!-- 스프링 시큐리티에서 제공하는 BCryptPasswordEncoder 클래스를 빈으로 등록 -->	  
<!-- 	<bean id="bcryptPasswordEncoder" -->
<!-- 		  class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder" ></bean> -->
	
	<!-- customLogoutSuccessHandler(사용자 정의 로그아웃 성공 처리자) -->
	<bean id="customLogoutSuccessHandler"
		  class="kr.or.ddit.security.CustomLogoutSuccessHandler"></bean>
	
	
	<!-- xmlns : xml namespace의 약자
		- Role : 권한(authorization)
		- permitAll : 누구나 접근 가능 / hasRole : 권한을 가진 자인가?
	 -->
	<security:http>
		<!-- URI 패턴으로 접근 제한을 설정 -->
		<!-- 이게 없으면 intercept가 안돼서 해당 페이지들에 누구나 들어갈 수 있다. -->
		<security:intercept-url pattern="/board/*" access="permitAll" />
<!-- 		<security:intercept-url pattern="/board/list" access="permitAll" /> -->
<!-- 		<security:intercept-url pattern="/board/register" access="hasRole('ROLE_MEMBER')" /> -->
<!-- 		<security:intercept-url pattern="/notice/list" access="permitAll" /> -->
<!-- 		<security:intercept-url pattern="/notice/register" access="hasRole('ROLE_ADMIN')" /> -->
		
		<!-- 폼 기반 인증 기능을 사용 -->
		<!-- 접근 제한에 걸리면 시큐리티가 기본적으로 제공하는 로그인 페이지로 이동 -->
<!-- 		<security:form-login/> -->
		
		<!-- 사용자가 정의한 로그인 페이지의 URI를 지정함 -->
		<!-- customLoginSuccess를 인증(로그인) 성공 처리자로 지정함 -->
		<security:form-login login-page="/login" 
			authentication-success-handler-ref="customLoginSuccess"
		/>
			<!-- authentication-success-handler-ref : 인증 성공시 참조할 곳 -->
		
		<!-- 로그인이 된 회원 중 권한이 없을 때 -->
		<!-- 접근access 거부denied 처리자handler 의 URI를 지정 -->
<!-- 		<security:access-denied-handler error-page="/accessError" /> -->
		
		<!-- 등록된 CustomAccessDeniedHandler를 접근 거부 처리자로 지정함
			 customAccessDenied 객체를 reference(참조-바라본다)
			 함 -->
		<security:access-denied-handler ref="customAccessDenied" />
	
		<!-- 데이터 소스를 지정하고 테이블을 이용해서 기존 로그인 정보를 기록
			 쿠키의 유효시간을 지정함
			 token-validity-seconds : 쿠키의 유효시간(초) 604800초는 7일
			 * remember-me = loginForm.jsp에서  
			 *remember-me 안됨 쌤꺼 보고하기
			 -->
		 <security:remember-me data-source-ref="dataSource"
		token-validity-seconds="604800" />
		
		<!-- 로그아웃 처리를 위한 URI를 지정하고, 로그아웃한 후에 세션을 무효화함
			 customLogoutSuccessHandler(사용자정의 로그아웃 성공 처리자)
			 * JSESSION_ID는 웹브라우저(유일한 세션)의 유일한 세션값을 쿠키에 담고있음 
		 -->								<!-- invalidate-session => 세션 제거 -->
		<security:logout logout-url="/logout" invalidate-session="true"
			 success-handler-ref="customLogoutSuccessHandler"
			 delete-cookies="remember-me,JSESSION_ID" />
			 
	</security:http>
   
	<!-- authentication : 인증(로그인) 
		1) 회원 게시판
			가) 목록("/board/list") : 모두가 접근 가능
			나) 등록("/board/register") : 로그인한 회원만 접근 가능
		2) 공지사항 게시판
			가) 목록("/notice/list") : 모두가 접근 가능
			나) 등록("/notice/register") : 로그인한 관리자만 접근 가능
			
		회원(USER)테이블 : USERNAME, PASSWORD, ENABLED
		
		권한(AUTH)테이블 : USERNAME, AUTHORIZE
   -->
	<security:authentication-manager>
		<!-- 지정된 아이디와 패스워드로 로그인이 가능하도록 설정
			authentication-provider : 인증(로그인)
		 -->
		<security:authentication-provider user-service-ref="customUserDetailsService">
			<!-- 2023.02.13 -->
				<!-- 메모리상에 아이디와 패스워드를 지정하고 로그인을 처리함 
					  스프링 시큐리티 5버전부터는 패스워드 암호화 처리기를 반드시 이용해야 함.	
					  암호화 처리기를 사용하지 않도록 noop 문자열을 비밀번호 앞에 사용함	(현재 5.0.7버전이라 noop써야함)
					 + 인터넷 창을 닫아야지 로그아웃이 된다.(session이 다 끊겨야..)
				 -->
<!-- 			<security:user-service> -->
<!-- 				<security:user name="member" password="{noop}1234" authorities="ROLE_MEMBER"/> -->
<!-- 				<security:user name="admin" password="{noop}1234" authorities="ROLE_ADMIN"/> -->
			<!-- security:user-service의 조건을 충족시키면  상단에 있는 scurity:intercept-url 패턴으로 들어가게 된다.-->					
<!-- 			</security:user-service> -->

		<!-- 사용자가 정의한 비밀번호 암호화 처리기를 지정(암호화를 안쓰겠다는 의미) -->
			<security:password-encoder ref="customPasswordEncoder" />

		<!-- ==================================================== -->
		<!-- 2023.02.14 -->
			<!-- DB를 사용하겠다는 의미. 데이터 소스(root-context.xml)를 지정. -->
			<!-- jdbc-user-service 처리 -->
<!-- 			<security:jdbc-user-service data-source-ref="dataSource"/> -->
			
			<!-- 비밀번호 암호화 이용 -->
			<!-- bcryptPasswordEncoder 비밀번호 암호화 처리기를 사용하겠다는 의미  
				이걸쓰려면 해당 클래스를 위쪽에서 bean으로 등록-->
<!-- 			<security:password-encoder ref="bcryptPasswordEncoder"/>		 -->

			</security:authentication-provider>
	</security:authentication-manager>
</beans>




































