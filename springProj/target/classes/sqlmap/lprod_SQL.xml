<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace : xml파일이 여러개일 수 있으므로 
	이를 구별하기 위한 식별 용도로 사용하기 위해서 namespace가 필요
	보통 테이블명을 쓴다
 -->
<mapper namespace="lprod">
	
	<!-- LPROD : ATTACH = 1 : N -->
	<resultMap type="lprodVO" id="lprodMap">
		<result property="lprodGu" column="LPROD_GU" />
		<result property="lprodId" column="LPROD_ID" />
		<result property="lprodNm" column="LPROD_NM" />
		<collection property="attachVOList" resultMap="attachMap"></collection>
		<!-- property는 vo의 변수명, column은 sql 컬럼명 -->
		<!-- association은 1:1관계, collection은 1:多 관계 -->
	</resultMap>
	
	<resultMap type="attachVO" id="attachMap">
		<result property="etpId" column="ETP_ID"/> 
		<result property="seq" column="SEQ"/> 
		<result property="filename" column="FILENAME"/> 
		<result property="filesize" column="FILESIZE"/> 
		<result property="thumbnail" column="THUMBNAIL"/> 
		<result property="regdate" column="REGDATE"/> 
	</resultMap>
	
	<sql id="search">
		<if test="keyword!=null and keyword!=''">
			AND(
					LPROD_ID LIKE '%' || #{keyword} || '%'
        		 OR	LPROD_GU LIKE '%' || #{keyword} || '%'
        		 OR	LPROD_NM LIKE '%' || #{keyword} || '%'
				)
		</if>
	</sql>
	
	<select id="list" parameterType="hashMap" resultType="lprodVO">
<!-- 		SELECT  	LPROD_ID, LPROD_GU, LPROD_NM -->
<!-- 		FROM    	LPROD -->
<!-- 		ORDER BY 	LPROD_GU -->

		WITH U AS(
		            SELECT  ROW_NUMBER() OVER (ORDER BY T.LPROD_ID DESC) RNUM
		                    , T.*
		            FROM
			            (
			                SELECT  LPROD_ID, LPROD_GU, LPROD_NM
			                FROM    LPROD
					        WHERE 	1 = 1
					        <include refid="search"></include>
			            ) T
		        
		        )
		SELECT  U.*
		FROM    U
		WHERE   U.RNUM BETWEEN (#{currentPage}*#{size})-(#{size}-1) 
		        AND (#{currentPage}*#{size})
	</select>
	
	<!-- 상품분류 자동생성 -->
	<select id="getLprodId" resultType="int">
		SELECT NVL(MAX(TO_NUMBER(LPROD_ID)), 0)+1 FROM LPROD
	</select>
	
	<!-- 상품분류코드 자동생성 -->
	<select id="getLprodGu" resultType="String">
		SELECT 	SUBSTR(MAX(LPROD_GU),1,1) || (SUBSTR(MAX(LPROD_GU),2)+1)
		FROM 	LPROD
	</select>
	
	<!-- 상품분류 정보를 입력 
		 lprodVO : LprodVO[lprodId:10, lprodGu:P404, lprodNm:간식류]
		 insert/update/delete의 resultType은 생략(int)
		 
		 rok : 락커(ResultType, Order, KeyProperty)
	--> 
	<insert id="createPost" parameterType="lprodVO">
		<!-- 방법1 -->
<!-- 		INSERT INTO LPROD(LPROD_ID, LPROD_GU, LPROD_NM) -->
<!-- 		VALUES((SELECT NVL(MAX(LPROD_ID),0)+1 FROM LPROD), #{lprodGu}, #{lprodNm}); -->
		
		<!-- 방법2 selectKey로 빼기 -->
		<selectKey order="BEFORE" keyProperty="lprodId" resultType="int">
			SELECT NVL(MAX(LPROD_ID),0)+1 FROM LPROD
		</selectKey>
		INSERT INTO LPROD(LPROD_ID, LPROD_GU, LPROD_NM)
		VALUES(	#{lprodId}, 
				(SELECT 	SUBSTR(MAX(LPROD_GU),1,1) || (SUBSTR(MAX(LPROD_GU),2)+1)
				FROM 	LPROD), 
				#{lprodNm}
			   )
	</insert>
	
	<!-- 상품분류 상세보기 
		↓이렇게 변수로 받아온다.
			lprodVO(전) : lprodVO : LprodVO [lprodId=0, lprodGu=P404, lprodNm=null]
		실행 후 리턴될 때는 ↓
			lprodVO(후) : lprodVO : LprodVO [lprodId=10, lprodGu=P404, lprodNm=간식류]
	-->
	<select id="detail" parameterType="lprodVO" resultMap="lprodMap">
<!-- 		SELECT 	LPROD_ID, LPROD_GU, LPROD_NM -->
<!-- 		FROM	LPROD -->
<!-- 		WHERE 	LPROD_GU = #{lprodGu} -->

		<!-- 첨부파일 추가 후 아래로 변경 -->
		<!-- A테이블에서 가져오는 컬럼들은 각각의 매개변수로,
			B테이블에서 가져오는 컬럼들은 각행이 VO에 담긴 후 List로 모이게 된다 (=attachVOList 매개변수 1개에 담김)-->
<!-- 		SELECT  A.LPROD_ID, A.LPROD_GU, A.LPROD_NM -->
<!-- 		        , B.SEQ, B.FILENAME, B.FILESIZE, B.THUMBNAIL, B.REGDATE, B.ETP_ID -->
<!-- 		FROM    LPROD A INNER JOIN ATTACH B -->
<!-- 		ON(A.LPROD_GU = B.ETP_ID AND A.LPROD_GU = #{lprodGu}) -->

		<!-- INNER에서 OUTER로 바꿔줌 -->
		SELECT  A.LPROD_ID, A.LPROD_GU, A.LPROD_NM
        		, B.SEQ, B.FILENAME, B.FILESIZE, B.THUMBNAIL, B.REGDATE, B.ETP_ID
		FROM    LPROD A LEFT OUTER JOIN ATTACH B
		ON(A.LPROD_GU = B.ETP_ID)
		WHERE A.LPROD_GU = #{lprodGu}
		
	</select>
	
	<!-- 상품분류 정보변경
		lprodVO{"lprodId" : "10", "lprodGu":"P404", "lprodnm":"간식류변경"}
	 -->
	<update id="updatePost" parameterType="lprodVO">
		UPDATE  LPROD
		SET     LPROD_NM = #{lprodNm}
		WHERE   LPROD_GU = #{lprodGu}
	</update>
	
	<!-- 상품분류정보 삭제 
		 lprodVO{"lprodId":"10","lprodGu":"P404","lprodNm":"간식류변경"}
	-->
	<delete id="deletePost" parameterType="lprodVO">
		DELETE FROM LPROD
		WHERE LPROD_GU = #{lprodGu}
	</delete>
	
	<!-- 첨부파일 등록 -->
	<insert id="uploadFormAction" parameterType="attachVO">
		<!-- rok : 락커 -->
		<selectKey resultType="int" order="BEFORE" keyProperty="seq">
			SELECT NVL(MAX(SEQ),0)+1 FROM ATTACH
		</selectKey>
		INSERT INTO ATTACH(SEQ, FILENAME, FILESIZE, THUMBNAIL, REGDATE)
		VALUES(
		    #{seq},
		    #{filename}, #{filesize}, #{thumbnail},
		    SYSDATE
		)		
	</insert>
	
	<!-- 다중 insert 시 update 태그를 사용
		 드루와 : List<AttachVO> attachVOList
		 가즈아 : insert, update, delete의 경우 resultType은 생략
	 -->
	<update id="createPostAttach" parameterType="java.util.List">
		<!-- order="BEFORE"는 foreach 태그 실행 전에 selectKey부터 실행 -->
					<!-- R O K  -->
		<selectKey resultType="int" order="BEFORE" keyProperty="seq">
			SELECT NVL(MAX(SEQ),0)+1 FROM ATTACH
		</selectKey>
		
		<!-- index : 반복 시 index값. 0부터 시작. -->
		<foreach collection="list" item="attachVO"
				open="INSERT ALL" close="SELECT * FROM DUAL" 
				separator=" " index="idx">
			INTO ATTACH(SEQ, FILENAME, FILESIZE, THUMBNAIL, REGDATE, ETP_ID)
		    VALUES(#{idx}+#{seq}, #{attachVO.filename}, #{attachVO.filesize},
		    		 #{attachVO.thumbnail}, sysdate, #{attachVO.etpId} )		
		    	<!-- index는 0부 터 시작 => seq 값에 0부터 1씩 커지는 수를 더해서 증가시킴 -->
		    	<!-- #{}안에 들어있는 변수 = attachVO의 변수 -->
		</foreach>
	</update>
	
	<!-- 전체 행의 수(total) -->
	<select id="getTotal" parameterType="String" resultType="int">
		SELECT	COUNT(*) FROM LPROD
		WHERE	1 = 1
		<include refid="search"></include>
	</select>

</mapper>



































